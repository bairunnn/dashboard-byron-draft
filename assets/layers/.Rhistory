knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
sites <- read.csv("Sites_v6_original.csv")
sites <- sites %>%
mutate(
rank_Units = rank(-Units),  # highest to lowest
rank_NEAR_HAWKER = rank(NEAR_HAWKER),  # lowest to highest
rank_NEAR_MRT = rank(NEAR_MRT),  # lowest to highest
rank_NParks_KM2 = rank(-NParks_KM2),  # highest to lowest
rank_NEAR_LIB = rank(NEAR_LIB),  # lowest to highest
rank_CYCLE_M = rank(-CYCLE_M),  # highest to lowest
rank_MATURE_KM2 = rank(-MATURE_KM2)  # highest to lowest
)
View(sites)
names(sites)
resale <- read.csv("Sites_v6_original.csv")
View(resale)
resale <- read.csv("resale.csv")
View(resale)
View(resale)
str(resale)
resale_summary <- resale %>%
mutate(psf = resale_price / floor_area_sqm) %>%  # Create new column psf
filter(flat_type %in% c("4 ROOM", "3 ROOM")) %>%  # Keep only specified flat types
group_by(town, month) %>%  # Group by town and month
summarize(mean_psf = mean(psf, na.rm = TRUE))  # Calculate mean psf
View(resale_summary)
unique(resale_summary$town)
ggplot(resale_summary, aes(x = month, y = mean_psf, color = town)) +
geom_line() +  # Add lines for the trend
labs(title = "Trend of Mean PSF Over Time",
x = "Month",
y = "Mean PSF") +
theme_minimal() +  # Use a minimal theme
theme(legend.title = element_blank())  # Optionally remove the legend title
# Ensure month is in a suitable date format (e.g., "YYYY-MM")
resale_summary$month <- as.Date(paste0(resale_summary$month, "-01"))  # Assuming month is in "YYYY-MM" format
# Plotting
ggplot(resale_summary, aes(x = month, y = mean_psf, color = town)) +
geom_line(size = 1) +  # Add lines for the trend
labs(title = "Trend of Mean PSF Over Months",
x = "Month",
y = "Mean PSF") +
theme_minimal() +  # Use a minimal theme
theme(legend.title = element_blank(),  # Optionally remove the legend title
axis.text.x = element_text(angle = 45, hjust = 1)) +  # Angle x-axis labels for better visibility
scale_x_date(date_labels = "%b %Y")  # Format x-axis labels for better readability
library(lubridate)
new_summary <- resale_summary %>%
mutate(year = year(month)) %>%  # Extract the year from month
group_by(town, year) %>%  # Group by town and year
summarize(mean_psf = mean(mean_psf, na.rm = TRUE))  # Calculate mean psf for each group
View(new_summary)
ggplot(new_summary, aes(x = year, y = mean_psf, color = town)) +
geom_line(size = 1) +  # Add lines for the trend
labs(title = "Trend of Mean PSF Over Months",
x = "Month",
y = "Mean PSF") +
theme_minimal() +  # Use a minimal theme
theme(legend.title = element_blank(),  # Optionally remove the legend title
axis.text.x = element_text(angle = 45, hjust = 1)) +  # Angle x-axis labels for better visibility
scale_x_date(date_labels = "%b %Y")  # Format x-axis labels for better readability
ggplot(new_summary, aes(x = year, y = mean_psf, color = town)) +
geom_line(size = 1) +  # Add lines for the trend
labs(title = "Trend of Mean PSF Over Months",
x = "Year",
y = "Mean PSF") +
theme_minimal() +  # Use a minimal theme
theme(legend.title = element_blank(),  # Optionally remove the legend title
axis.text.x = element_text(angle = 45, hjust = 1)) +  # Angle x-axis labels for better visibility
scale_x_date(date_labels = "%b %Y")  # Format x-axis labels for better readability
ggplot(new_summary, aes(x = year, y = mean_psf, color = town)) +
geom_line(size = 1) +  # Add lines for the trend
labs(title = "Trend of Mean PSF Over Months",
x = "Year",
y = "Mean PSF") +
theme_minimal() +  # Use a minimal theme
theme(legend.title = element_blank(),  # Optionally remove the legend title
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(new_summary, aes(x = year, y = mean_psf, color = town)) +
geom_line(size = 1) +  # Add lines for the trend
labs(title = "Trend of Mean PSF Over Years",
x = "Year",
y = "Mean PSF") +
theme_minimal() +  # Use a minimal theme
theme(legend.title = element_blank())  # Optionally remove the legend title
rebased_summary <- new_summary %>%
group_by(town) %>%  # Group by town
mutate(rebased_psf = (mean_psf / mean_psf[year == 2017]) * 100)  # Rebase to 2017
ggplot(rebased_summary, aes(x = year, y = rebased_psf, color = town)) +
geom_line(size = 1) +  # Add lines for the trend
labs(title = "Rebased Trend of Mean PSF Over Years (2017 = 100)",
x = "Year",
y = "Rebased Mean PSF") +
theme_minimal() +  # Use a minimal theme
theme(legend.title = element_blank())  # Optionally remove the legend title
rebased_summary <- new_summary %>%
group_by(town) %>%  # Group by town
mutate(rebased_psf = (mean_psf / mean_psf[year == 2017]) * 100)  # Rebase to 2017
singapore_summary <- rebased_summary %>%
group_by(year) %>%
summarize(town = "SINGAPORE", rebased_psf = mean(rebased_psf, na.rm = TRUE)) %>%
ungroup()
View(singapore_summary)
final_summary <- bind_rows(rebased_summary, singapore_summary)
ggplot(final_summary, aes(x = year, y = rebased_psf, color = town)) +
geom_line(size = 1) +  # Add lines for the trend
labs(title = "Rebased Trend of Mean PSF Over Years (2017 = 100)",
x = "Year",
y = "Rebased Mean PSF") +
theme_minimal() +  # Use a minimal theme
theme(legend.title = element_blank())  # Optionally remove the legend title
unique(final_summary$town)
towns_to_filter <- c("ANG MO KIO", "BEDOK", "BUKIT BATOK",
"GEYLANG", "JURONG WEST",
"KALLANG/WHAMPOA", "PASIR RIS",
"SENGKANG", "WOODLANDS",
"SINGAPORE")
# Filter final_summary to include only specified towns
filtered_summary <- final_summary %>%
filter(town %in% towns_to_filter)
# Write the filtered dataframe to a CSV file
write.csv(filtered_summary, "price_index.csv", row.names = FALSE)
View(new_summary)
resale <- read.csv("resale.csv")
to_title_case <- function(x) {
str_to_title(x)  # Converts to title case
}
# Update the $TOWN column in resale to title case
resale <- resale %>%
mutate(TOWN = to_title_case(TOWN))
resale <- read.csv("resale.csv")
to_title_case <- function(x) {
str_to_title(x)  # Converts to title case
}
# Update the $TOWN column in resale to title case
resale <- resale %>%
mutate(town = to_title_case(town))
View(resale)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
sites <- read.csv("Sites_v6_original.csv")
sites <- sites %>%
mutate(
rank_Units = rank(-Units),  # highest to lowest
rank_NEAR_HAWKER = rank(NEAR_HAWKER),  # lowest to highest
rank_NEAR_MRT = rank(NEAR_MRT),  # lowest to highest
rank_NParks_KM2 = rank(-NParks_KM2),  # highest to lowest
rank_NEAR_LIB = rank(NEAR_LIB),  # lowest to highest
rank_CYCLE_M = rank(-CYCLE_M),  # highest to lowest
rank_MATURE_KM2 = rank(-MATURE_KM2)  # highest to lowest
)
write_csv(sites, "sites_v7_ranked.csv")
resale <- read.csv("resale.csv")
to_title_case <- function(x) {
str_to_title(x)  # Converts to title case
}
# Update the $TOWN column in resale to title case
resale <- resale %>%
mutate(town = to_title_case(town))
resale_summary <- resale %>%
mutate(psf = resale_price / floor_area_sqm) %>%  # Create new column psf
filter(flat_type %in% c("4 ROOM", "3 ROOM")) %>%  # Keep only specified flat types
group_by(town, month) %>%  # Group by town and month
summarize(mean_psf = mean(psf, na.rm = TRUE))  # Calculate mean psf
# Ensure month is in a suitable date format (e.g., "YYYY-MM")
resale_summary$month <- as.Date(paste0(resale_summary$month, "-01"))  # Assuming month is in "YYYY-MM" format
# Plotting
ggplot(resale_summary, aes(x = month, y = mean_psf, color = town)) +
geom_line(size = 1) +  # Add lines for the trend
labs(title = "Trend of Mean PSF Over Months",
x = "Month",
y = "Mean PSF") +
theme_minimal() +  # Use a minimal theme
theme(legend.title = element_blank(),  # Optionally remove the legend title
axis.text.x = element_text(angle = 45, hjust = 1)) +  # Angle x-axis labels for better visibility
scale_x_date(date_labels = "%b %Y")  # Format x-axis labels for better readability
new_summary <- resale_summary %>%
mutate(year = year(month)) %>%  # Extract the year from month
group_by(town, year) %>%  # Group by town and year
summarize(mean_psf = mean(mean_psf, na.rm = TRUE))  # Calculate mean psf for each group
ggplot(new_summary, aes(x = year, y = mean_psf, color = town)) +
geom_line(size = 1) +  # Add lines for the trend
labs(title = "Trend of Mean PSF Over Years",
x = "Year",
y = "Mean PSF") +
theme_minimal() +  # Use a minimal theme
theme(legend.title = element_blank())  # Optionally remove the legend title
rebased_summary <- new_summary %>%
group_by(town) %>%  # Group by town
mutate(rebased_psf = (mean_psf / mean_psf[year == 2017]) * 100)  # Rebase to 2017
singapore_summary <- rebased_summary %>%
group_by(year) %>%
summarize(town = "SINGAPORE", rebased_psf = mean(rebased_psf, na.rm = TRUE)) %>%
ungroup()
final_summary <- bind_rows(rebased_summary, singapore_summary)
ggplot(final_summary, aes(x = year, y = rebased_psf, color = town)) +
geom_line(size = 1) +  # Add lines for the trend
labs(title = "Rebased Trend of Mean PSF Over Years (2017 = 100)",
x = "Year",
y = "Rebased Mean PSF") +
theme_minimal() +  # Use a minimal theme
theme(legend.title = element_blank())  # Optionally remove the legend title
towns_to_filter <- c("ANG MO KIO", "BEDOK", "BUKIT BATOK",
"GEYLANG", "JURONG WEST",
"KALLANG/WHAMPOA", "PASIR RIS",
"SENGKANG", "WOODLANDS",
"SINGAPORE")
# Filter final_summary to include only specified towns
filtered_summary <- final_summary %>%
filter(town %in% towns_to_filter)
# Write the filtered dataframe to a CSV file
write.csv(filtered_summary, "price_index.csv", row.names = FALSE)
View(filtered_summary)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
sites <- read.csv("Sites_v6_original.csv")
sites <- sites %>%
mutate(
rank_Units = rank(-Units),  # highest to lowest
rank_NEAR_HAWKER = rank(NEAR_HAWKER),  # lowest to highest
rank_NEAR_MRT = rank(NEAR_MRT),  # lowest to highest
rank_NParks_KM2 = rank(-NParks_KM2),  # highest to lowest
rank_NEAR_LIB = rank(NEAR_LIB),  # lowest to highest
rank_CYCLE_M = rank(-CYCLE_M),  # highest to lowest
rank_MATURE_KM2 = rank(-MATURE_KM2)  # highest to lowest
)
write_csv(sites, "sites_v7_ranked.csv")
resale <- read.csv("resale.csv")
to_title_case <- function(x) {
str_to_title(x)  # Converts to title case
}
# Update the $TOWN column in resale to title case
resale <- resale %>%
mutate(town = to_title_case(town))
resale_summary <- resale %>%
mutate(psf = resale_price / floor_area_sqm) %>%  # Create new column psf
filter(flat_type %in% c("4 ROOM", "3 ROOM")) %>%  # Keep only specified flat types
group_by(town, month) %>%  # Group by town and month
summarize(mean_psf = mean(psf, na.rm = TRUE))  # Calculate mean psf
# Ensure month is in a suitable date format (e.g., "YYYY-MM")
resale_summary$month <- as.Date(paste0(resale_summary$month, "-01"))  # Assuming month is in "YYYY-MM" format
# Plotting
ggplot(resale_summary, aes(x = month, y = mean_psf, color = town)) +
geom_line(size = 1) +  # Add lines for the trend
labs(title = "Trend of Mean PSF Over Months",
x = "Month",
y = "Mean PSF") +
theme_minimal() +  # Use a minimal theme
theme(legend.title = element_blank(),  # Optionally remove the legend title
axis.text.x = element_text(angle = 45, hjust = 1)) +  # Angle x-axis labels for better visibility
scale_x_date(date_labels = "%b %Y")  # Format x-axis labels for better readability
new_summary <- resale_summary %>%
mutate(year = year(month)) %>%  # Extract the year from month
group_by(town, year) %>%  # Group by town and year
summarize(mean_psf = mean(mean_psf, na.rm = TRUE))  # Calculate mean psf for each group
ggplot(new_summary, aes(x = year, y = mean_psf, color = town)) +
geom_line(size = 1) +  # Add lines for the trend
labs(title = "Trend of Mean PSF Over Years",
x = "Year",
y = "Mean PSF") +
theme_minimal() +  # Use a minimal theme
theme(legend.title = element_blank())  # Optionally remove the legend title
rebased_summary <- new_summary %>%
group_by(town) %>%  # Group by town
mutate(rebased_psf = (mean_psf / mean_psf[year == 2017]) * 100)  # Rebase to 2017
singapore_summary <- rebased_summary %>%
group_by(year) %>%
summarize(town = "Singapore", rebased_psf = mean(rebased_psf, na.rm = TRUE)) %>%
ungroup()
final_summary <- bind_rows(rebased_summary, singapore_summary)
ggplot(final_summary, aes(x = year, y = rebased_psf, color = town)) +
geom_line(size = 1) +  # Add lines for the trend
labs(title = "Rebased Trend of Mean PSF Over Years (2017 = 100)",
x = "Year",
y = "Rebased Mean PSF") +
theme_minimal() +  # Use a minimal theme
theme(legend.title = element_blank())  # Optionally remove the legend title
towns_to_filter <- c("Ang Mo Kio", "Bedok", "Bukit Batok",
"Geylang", "Jurong West",
"Kallang/Whampoa", "Pasir Ris",
"Sengkang", "Woodlands",
"Singapore")
# Filter final_summary to include only specified towns
filtered_summary <- final_summary %>%
filter(town %in% towns_to_filter)
# Write the filtered dataframe to a CSV file
write.csv(filtered_summary, "price_index.csv", row.names = FALSE)
View(filtered_summary)
View(filtered_summary)
View(rebased_summary)
View(singapore_summary)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
parks_geojson <- st_read("Parks.geojson")
parks_geojson_cleaned <- parks_geojson %>%
mutate(Description = gsub("<[^>]+>", "", Description))
st_write(parks_geojson_cleaned, "Parks_cleaned.geojson")
parks_df <- parks_geojson_cleaned %>%
mutate(NAME = sub(".*NAME ([^ ]+) .*", "\\1", Description)) %>%
select(Name, NAME)
View(parks_df)
library(stringt)
library(stringr)
parks_geojson <- st_read("Parks.geojson")
parks_df <- geojson_data %>%
mutate(NAME = sub(".*NAME (.*?) N_RESERVE.*", "\\1", Description)) %>%
select(Name, NAME)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(stringr)
parks_geojson <- st_read("Parks.geojson")
parks_geojson_cleaned <- parks_geojson %>%
mutate(Description = gsub("<[^>]+>", "", Description))
st_write(parks_geojson_cleaned, "Parks_cleaned.geojson")
parks_df <- parks_geojson_cleaned %>%
mutate(NAME = sub(".*NAME (.*?) N_RESERVE.*", "\\1", Description)) %>%
select(Name, NAME)
View(parks_df)
parks_df <- parks_geojson_cleaned %>%
mutate(Park_Name = sub(".*NAME (.*?) N_RESERVE.*", "\\1", Description)) %>%
select(Name, NAME)
parks_df <- parks_geojson_cleaned %>%
mutate(Park_Name = sub(".*NAME (.*?) N_RESERVE.*", "\\1", Description)) %>%
select(Name, NAME)
parks_df <- parks_geojson_cleaned %>%
mutate(Park_Name = sub(".*NAME (.*?) N_RESERVE.*", "\\1", Description)) %>%
select(Name, Park_Name)
View(parks_df)
st_write(parks_geojson_cleaned, "Parks_cleaned.geojson")
parks_df <- parks_geojson_cleaned %>%
mutate(Park_Name = sub(".*NAME (.*?) N_RESERVE.*", "\\1", Description)) %>%
select(Name, Park_Name)
st_write(parks_df, "Parks_cleaned.geojson")
libs_geojson <- st_read("PublicLibraries.geojson")
libs_geojson_cleaned <- libs_geojson %>%
mutate(Description = gsub("<[^>]+>", "", Description))
libs_geojson <- st_read("PublicLibraries.geojson")
libs_geojson_cleaned <- libs_geojson %>%
mutate(Description = gsub("<[^>]+>", "", Description))
head(libs_geojson_cleaned)
libs_df <- libs_geojson_cleaned %>%
mutate(Library_Name = sub(".*NAME (.*?) ADDRESSPOSTALCODE.*", "\\1", Description)) %>%
select(Name, Library_Name)
View(libs_df)
View(libs_df)
st_write(libs_df, "PublicLibraries_cleaned.geojson")
hawkers_geojson <- st_read("HawkerCentres.geojson")
hawkers_geojson_cleaned <- hawkers_geojson %>%
mutate(Description = gsub("<[^>]+>", "", Description))
View(hawkers_geojson_cleaned)
head(hawkers_geojson_cleaned)
hawkers_df <- hawkers_geojson_cleaned %>%
mutate(Library_Name = sub(".*NAME (.*?) ADDRESSBUILDINGNAME.*", "\\1", Description)) %>%
select(Name, Library_Name)
st_write(hawkers_df, "HawkerCentres_cleaned.geojson")
hawkers_df <- hawkers_geojson_cleaned %>%
mutate(Hawker_Name = sub(".*NAME (.*?) ADDRESSBUILDINGNAME.*", "\\1", Description)) %>%
select(Name, Hawker_Name)
st_write(hawkers_df, "HawkerCentres_cleaned.geojson")
mrt <- st_read("MRTLines_20240914.geojson")
unique(mrt$colour)
mrt <- mrt %>%
mutate(Line_Number = case_when(
colour == "#df2826" ~ "North South Line",
colour == "#009544" ~ "East West Line",
colour == "#9900aa" ~ "North East Line",
colour == "#f99e0c" ~ "Circle Line",
colour == "#0055b7" ~ "Downtown Line",
colour == "#9c5917" ~ "Thompson East Coast Line",
colour == "#708270" ~ "LRT",
TRUE ~ NA_character_  # In case of unmatched colour, set to NA
))
st_write(mrt, "MRTLines_20240914_cleaned.geojson")
